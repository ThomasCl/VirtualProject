apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: virtual-development
  name: nextjs-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nextjs-app
  template:
    metadata:
      labels:
        app: nextjs-app
    spec:
      containers:
        - name: nextjs
          image: mr1dentity/frontend-image:dev
          ports:
            - containerPort: 3000

apiVersion: v1
kind: Service
metadata:
  name: virtual-frontend-service
  namespace: virtual-development
spec:
  selector:
    app: nextjs-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer



apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: virtual-front-certificate
  namespace: virtual-development
spec:
  secretName: virtual-ingress-cert
  dnsNames:
    - virtual.65.co.ucll.cloud
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer


# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-certs
  name: virtual-ingress
  namespace: virtual-development
spec:
  rules:
    - host: virtual.65.co.ucll.cloud
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: virtual-frontend-service
              port:
                number: 3000
  tls: # < placing a host in the TLS config will determine what ends up in the cert's subjectAltNames
  - hosts:
    - virtual.65.co.ucll.cloud
    secretName: virtual-ingress-cert # < cert-manager will store the created certificate in this secret.
